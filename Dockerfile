# المرحلة 1: استخدام صورة بايثون رسمية كنقطة بداية
# نستخدم 3.11-slim لأنها صغيرة الحجم ومستقرة
FROM python:3.11-slim

# تعيين متغيرات البيئة لمنع بايثون من إنشاء ملفات .pyc
# وضمان طباعة المخرجات مباشرة إلى السجلات
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# تعيين مجلد العمل داخل الحاوية (الكونتينر)
# كل الأوامر التالية ستُنفذ من هذا المسار
WORKDIR /app

# نسخ ملف المتطلبات أولاً للاستفادة من ميزة التخزين المؤقت (caching) في Docker
# إذا لم يتغير هذا الملف، لن يتم إعادة تثبيت المكتبات في كل مرة
COPY requirements.txt .

# تثبيت المتطلبات باستخدام pip
# --no-cache-dir لتقليل حجم الصورة النهائية
# --upgrade pip للتأكد من أننا نستخدم أحدث إصدار من pip
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# نسخ باقي كود المشروع إلى مجلد العمل داخل الحاوية
COPY . .

# تعيين متغير البيئة PORT الذي تستخدمه منصات مثل Cloud Run و Railway
# إذا لم توفر المنصة هذا المتغير، سيتم استخدام 8080 كقيمة افتراضية
ENV PORT 8080

# --- الأمر النهائي لتشغيل التطبيق ---
# هذا هو السطر الذي تم تصحيحه.
# نستخدم "shell form" (بدون أقواس مربعة) للسماح باستبدال متغير $PORT بقيمته الفعلية.
CMD gunicorn -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:$PORT app:app
